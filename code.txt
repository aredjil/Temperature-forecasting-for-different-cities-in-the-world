# Correlation between Temperature and Latitude
correlations = {
    "Pearson": correlation(df, "AverageTemperature", "Latitude", method="pearson"),
    "Spearman": correlation(df, "AverageTemperature", "Latitude", method="spearman"),
    "Kendall": correlation(df, "AverageTemperature", "Latitude", method="kendall"),
}
# Display correlation values
print("\nComparison of Correlation Methods:")
for method, value in correlations.items():
    print(f"{method}: {value:.4f}")

# Plot Temperature vs. Latitude
plt.figure(figsize=(6, 4))
sns.scatterplot(x=df["Latitude"], y=df["AverageTemperature"], alpha=0.5)
plt.xlabel("Latitude")
plt.ylabel("Average Temperature")
plt.title("Temperature vs. Latitude")
plt.show()

# Compute mutual information between Temperature and Pollution variables
X = df[["NO2 Mean", "SO2 Mean", "CO Mean"]]
y = df["AverageTemperature"]

my_scores = mutual_info_regression(X, y)
my_df = pd.DataFrame(my_scores, index=X.columns, columns=["Mutual Information"])
print(my_df)

dcorr_no2 = distance_correlation(df["AverageTemperature"].dropna(), df["NO2 Mean"].dropna())
dcorr_so2 = distance_correlation(df["AverageTemperature"].dropna(), df["SO2 Mean"].dropna())
dcorr_co = distance_correlation(df["AverageTemperature"].dropna(), df["CO Mean"].dropna())

print(f"Distance Correlation - Temperature & NO2: {dcorr_no2:.4f}")
print(f"Distance Correlation - Temperature & SO2: {dcorr_so2:.4f}")
print(f"Distance Correlation - Temperature & CO: {dcorr_co:.4f}")

# Correlation between Temperature and Pollution
pollution_vars = ["NO2 Mean", "SO2 Mean", "CO Mean"]
correlation_temp_pollution = df[["AverageTemperature"] + pollution_vars].corr()
print("\nCorrelation between Temperature and Pollution:")
print(correlation_temp_pollution["AverageTemperature"].drop("AverageTemperature"))

# Heatmap of temperature and pollution correlations
plt.figure(figsize=(6, 5))
sns.heatmap(correlation_temp_pollution, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Correlation Heatmap: Temperature and Pollution")
plt.show()

# Plot of "SO2 Mean", "NO2 Mean" and  "CO Mean" vs 	"AverageTemperature"
fig, axes = plt.subplots(1, 3, figsize=(18, 5))  # 1 fila, 3 columnas

# Temperature vs. SO2
sns.scatterplot(ax=axes[0], x=df["SO2 Mean"], y=df["AverageTemperature"], alpha=0.5)
axes[0].set_xlabel("SO2 Mean")
axes[0].set_ylabel("Average Temperature")
axes[0].set_title("Temperature vs. SO2")

# Temperature vs. NO2
sns.scatterplot(ax=axes[1], x=df["NO2 Mean"], y=df["AverageTemperature"], alpha=0.5)
axes[1].set_xlabel("NO2 Mean")
axes[1].set_ylabel("Average Temperature")
axes[1].set_title("Temperature vs. NO2")

# Temperature vs. CO
sns.scatterplot(ax=axes[2], x=df["CO Mean"], y=df["AverageTemperature"], alpha=0.5)
axes[2].set_xlabel("CO Mean")
axes[2].set_ylabel("Average Temperature")
axes[2].set_title("Temperature vs. CO")

plt.tight_layout()

# Pollution variables
pollution_vars = ["NO2 Mean", "SO2 Mean", "CO Mean"]

# Compute correlations using different methods
correlation_results = {}
for var in pollution_vars:
    correlation_results[var] = {
        "Pearson": correlation(df, "AverageTemperature", var, method="pearson"),
        "Spearman": correlation(df, "AverageTemperature", var, method="spearman"),
        "Kendall": correlation(df, "AverageTemperature", var, method="kendall"),
        "Distance Correlation": distance_correlation(df["AverageTemperature"].dropna(), df[var].dropna())
    }

# Convert to DataFrame for better visualization
correlation_df = pd.DataFrame(correlation_results).T

# Print correlation results
print("\nCorrelation between Temperature and Pollution:")
print(correlation_df)

# Plot bar chart for comparison
correlation_df.plot(kind='bar', figsize=(10, 6), colormap="coolwarm", edgecolor="black")
plt.xlabel("Pollution Variable")
plt.ylabel("Correlation Score")
plt.title("Comparison of Correlation Methods: Temperature vs Pollution")
plt.axhline(0, color='black', linewidth=1)
plt.ylim(-0.5,0.7)
plt.legend(title="Method")
plt.show()

### 3 Correlation between Temperature Change and Pollution
# Compute the moving average of temperature over 3-year periods
df["Temp_MA3"] = df.groupby("City")["AverageTemperature"].transform(lambda x: x.rolling(window=3).mean())

# Compute temperature change as the difference between the last 3-year avg and the previous period
df["Temp_Change"] = df.groupby("City")["Temp_MA3"].diff(periods=3)

# Drop rows where Temp_Change is NaN (first years without enough data)
df_cleaned = df.dropna(subset=["Temp_Change"])

# Compute correlation with pollution
correlation_temp_change_pollution = df_cleaned[["Temp_Change"] + pollution_vars].corr()
print("\nCorrelation between Temperature Change and Pollution:")
print(correlation_temp_change_pollution["Temp_Change"].drop("Temp_Change"))

# Heatmap of temperature change vs pollution
plt.figure(figsize=(8, 5))
sns.heatmap(correlation_temp_change_pollution, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Correlation Heatmap: Temperature Change and Pollution")
plt.show()